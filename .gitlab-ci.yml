image: alpine

variables:
  STACK_ROOT: "${CI_PROJECT_DIR}/.stack"
  IMAGE_NAME: ${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_SLUG}_${CI_COMMIT_SHA}

stages:
  - build
  - test
  - deploy

build:
  stage: build
  image: haskell
  cache:
    key: primary
    paths:
      - .stack
      - .stack-work
  script:
    - mkdir -p bin/lib
    - stack build --test --no-run-tests --copy-bins --local-bin-path ./bin
    - cp $(stack path --dist-dir)/build/impatience-test/impatience-test ./bin/impatience-test
    - strip ./bin/impatience-exe
    - ldd ./bin/impatience-exe
  artifacts:
    expire_in: 1 week
    paths:
      - bin/

test:
  stage: test
  image: haskell
  cache:
    key: primary
    policy: pull
    paths:
      - .stack
      - .stack-work
  dependencies: []
  script:
    - stack build hlint weeder
    - stack exec hlint -- .
    - stack exec weeder -- . --build
    - stack test --coverage
    - mkdir coverage
    - cp -a $(stack path --local-hpc-root)/. ./coverage/
  artifacts:
    expire_in: 1 week
    paths:
      - coverage/

# This re-runs the tests in an image that better reflects the deployed image
image_test:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - build
  script:
    - docker login -u gitlab-ci-token -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"
    - cp Dockerfile Dockerfile.test
    - echo "COPY ./bin/impatience-test /app/impatience-test" >> Dockerfile.test
    - docker build -t "test-image" -f Dockerfile.test .
    - docker run test-image impatience-test

image_build:
  stage: test # if on master, run alongside tests
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - build
  script:
    - docker login -u gitlab-ci-token -p "$CI_BUILD_TOKEN" "$CI_REGISTRY"
    - docker build -t "$IMAGE_NAME" .
    - docker push "$IMAGE_NAME"
  only:
    - master

deploy_image:
  stage: deploy
  environment:
    name: dev
  dependencies: []
  script:
    - apk add --no-cache curl
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
    - chmod +x ./kubectl
    - mv ./kubectl /usr/local/bin/kubectl
    - cd deploycfg
    - sed -i "s/__CI_ENVIRONMENT_SLUG__/${CI_ENVIRONMENT_SLUG}/" dev.yml service.yml
    - sed -i "s/__IMAGE__/$(echo ${IMAGE_NAME} | sed -e 's/\//\\\//g')/" dev.yml
    - kubectl apply -f dev.yml
    - kubectl apply -f service.yml
    - kubectl rollout status -f dev.yml
  only:
    - master

pages:
  stage: deploy
  dependencies:
    - test
  script:
    - mkdir -p public/coverage
    - mv coverage/ public/
  artifacts:
    paths:
    - public
    expire_in: 30 days
  only:
    - master